@model MachineAssignment.Models.Employee
@using MachineAssignment.Models;

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml"; // If using a layout page
}

<h1 id="headingtwo">Create Employee</h1>

@using (Html.BeginForm("CreateEmployee", "Home", FormMethod.Post, new { enctype = "multipart/form-data", id= "createEmployeeForm" }))
{
    @Html.AntiForgeryToken()

<div class="container-contact100">
 <div class="wrap-contact100">
    <div class="row justify-content-between text-left">
        <div class="form-group col-sm-6 flex-column d-flex">
            @Html.LabelFor(model => model.FirstName, new { @class = "required" })
            @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control", id = "firstName" })
            @Html.ValidationMessageFor(model => model.FirstName, "", new { @style = "color:red", id = "firstNameErrorMsg" })
        </div>

        <div class="form-group col-sm-6 flex-column d-flex">
            @Html.LabelFor(model => model.LastName, new { @class = "required" })
            @Html.TextBoxFor(model => model.LastName, new { @class = "form-control", id = "lastName" })
            @Html.ValidationMessageFor(model => model.LastName, "", new { @style = "color:red", id = "lastNameErrorMsg" })
        </div>
    </div>
    <div class="row justify-content-between text-left">
        <div class="form-group col-sm-6 flex-column d-flex">
            @Html.LabelFor(model => model.EmailAddress, new { @class = "required" })
            @Html.TextBoxFor(model => model.EmailAddress, new { @class = "form-control", id = "emailAddressInput" })
            @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @style = "color:red" , id = "emailAddressErrorMsg" })
            <p id="emailAddressError"></p>
        </div>

        <div class="form-group col-sm-6 flex-column d-flex">
            @Html.LabelFor(model => model.MobileNumber, new { @class = "required" })
            @Html.TextBoxFor(model => model.MobileNumber, new { @class = "form-control", id = "mobileNumberInput", @type = "number" })
            @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @style = "color:red", id = "mobileNumberErrorMsg" })
            <p id="mobileNumberError"></p>
        </div>
    </div>

    <div class="row justify-content-between text-left">
        <div class="form-group col-sm-6 flex-column d-flex">
            @Html.LabelFor(model => model.PanNumber, new { @class = "required" })
            @Html.TextBoxFor(model => model.PanNumber, new { @class = "form-control", id = "panNumberInput" })
            @Html.ValidationMessageFor(model => model.PanNumber, "", new { @style = "color:red" , id = "panNumberErrorMsg" })
            <p id="panNumberError"></p>
        </div>
        

        <div class="form-group col-sm-6 flex-column d-flex">
            @Html.LabelFor(model => model.PassportNumber, new { @class = "required" })
            @Html.TextBoxFor(model => model.PassportNumber, new { @class = "form-control", id = "passportNumberInput" })
            @Html.ValidationMessageFor(model => model.PassportNumber, "", new { @style = "color:red", id= "passportNumberErrorMsg" })
        <p id="passportNumberError"></p>
        </div>
    </div>

    <div class="row justify-content-between text-left">
        <div class="form-group col-sm-6 flex-column d-flex">
            @Html.LabelFor(model => model.DateOfBirth, new { @class = "required" })
            <div class="input-group date" data-target-input="nearest">
                @Html.TextBoxFor(model => model.DateOfBirth, "{0:yyyy-MM-dd}", new { @class = "form-control datepicker", id = "DateOfBirth" })
                <span class="input-group-text" id="dateOfBirthPickerIcon"><i class="fas fa-calendar-alt"></i></span>

                <div class="input-group-append" data-target="#DateOfBirth" data-toggle="datepicker">

                </div>
            </div>
            <p id="SelectedDOBResult"></p>
        </div>

        <div class="form-group col-sm-6 flex-column d-flex">
            @Html.LabelFor(model => model.DateOfJoinee, new { @class = "required" })
            <div class="input-group date" data-target-input="nearest">
                @Html.TextBoxFor(model => model.DateOfJoinee, "{0:yyyy-MM-dd}", new { @class = "form-control datepicker", id = "DateOfJoinee" })
                <span class="input-group-text" id="dateOfJoineePickerIcon"><i class="fas fa-calendar-alt"></i></span>
                <div class="input-group-append" data-target="#DateOfJoinee" data-toggle="datepicker">

                </div>

            </div>
            <p id="SelectedDOJResult"></p>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Country.CountryId, "Country", new { @class = "required" })
        <div class="dropdown">
            @Html.DropDownListFor(model => model.Country.CountryId, ViewBag.Countries as SelectList, "Select Country", new { @class = "form-control form-select-sm form-select", id = "ddlCountry" })
        </div>
        @Html.ValidationMessageFor(model => model.Country.CountryName, "", new { @style = "color:red" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.State.Row_Id, "State", new { @class = "required" })
        <div class="dropdown">
            @Html.DropDownListFor(model => model.State.Row_Id, Enumerable.Empty<SelectListItem>(), "Select State", new { @class = "form-control form-select-sm form-select", id = "ddlState" })
        </div>
        @Html.ValidationMessageFor(model => model.State, "", new { @style = "color:red" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.City.Row_Id, "City", new { @class = "required" })
        <div class="dropdown">
            @Html.DropDownListFor(model => model.City.Row_Id, Enumerable.Empty<SelectListItem>(), "Select City", new { @class = "form-control form-select-sm form-select", id = "ddlCity" })
        </div>
        @Html.ValidationMessageFor(model => model.City, "", new { @style = "color:red" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ProfileImage)
        @Html.TextBoxFor(model => model.ProfileImageFile, new { type = "file", @class = "form-control", id = "ProfileImageFile" })
        <p id="imageUploadResult"></p>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Gender)
        <div class="form-check">
            @Html.RadioButtonFor(model => model.Gender, 0, new { @class = "form-check-input" })
            @Html.Label("Male", new { @class = "form-check-label" })
        </div>
        <div class="form-check">
            @Html.RadioButtonFor(model => model.Gender, 1, new { @class = "form-check-input" })
            @Html.Label("Female", new { @class = "form-check-label" })
        </div>
    </div>

    @*<div class="form-group">
        @Html.LabelFor(model => model.IsActive)
        @Html.CheckBoxFor(model => model.IsActive)
    </div>*@

    
 </div>
</div>
    <div class="form-group text-center">
    <input type="submit" value="Create" class="btn custom-create-btn" id="create-btn"/>
</div>
    
}

    @section scripts{
        <script>

            $(document).ajaxStart(function () {
                $("#ajax-loader").show(); // Show the loader when an AJAX request starts
            }).ajaxStop(function () {
                $("#ajax-loader").hide(); // Hide the loader when all AJAX requests are completed
            });

        $(function () {

            // Event handler for Country dropdown change
            $("#ddlCountry").change(function () {
                var countryId = $(this).val();
                if (countryId) {
                    $.ajax({
                        url: "@Url.Action("GetStates", "Home")",
                        type: "GET",
                        data: { countryId: countryId },
                        success: function (data) {
                            // Clear and populate State dropdown
                            $("#ddlState").empty();
                            $("#ddlState").append('<option value="">Select State</option>');

                            $.each(data, function (index, state) {
                                $("#ddlState").append($('<option></option>').val(state.Row_Id).text(state.StateName));
                            });

                            // Clear City dropdown
                            $("#ddlCity").empty();
                            $("#ddlCity").append('<option value="">Select City</option>');
                        }
                    });
                }
                else {
                    // Clear State and City dropdowns
                    $("#ddlState").empty();
                    $("#ddlCity").empty();
                }
            });


            // Event handler for State dropdown change
            $("#ddlState").change(function () {
                var stateId = $(this).val();
                if (stateId) {
                    $.ajax({
                        url: "@Url.Action("GetCities", "Home")",
                        type: "GET",
                        data: { stateId: stateId },
                        success: function (data) {
                            // Populate City dropdown
                            console.log("inside success function");
                            $("#ddlCity").empty();
                            $("#ddlCity").append('<option value="">Select City</option>');
                            $.each(data, function (index, city) {
                                $("#ddlCity").append($('<option></option>').val(city.Row_Id).text(city.CityName));
                            });
                        }
                    });
                }
                else {
                    // Clear City dropdown
                    $("#ddlCity").empty();
                }
            });
        });


        //Validation for image upload..
        $('#ProfileImageFile').on('change', function() {
            const size =(this.files[0].size / 1024).toFixed(2);
            console.log(size);
            const fileType = this.files[0]['type'];
            const validImageTypes = ['image/jpg', 'image/jpeg', 'image/png'];
            if (validImageTypes.includes(fileType)) {
                if (size > 200) {
                    $("#ProfileImageFile").val("");
                    console.log("after empty");
                    $("#imageUploadResult").empty();
                    $("#imageUploadResult").html('<b style="color:red">' +
                        'This file size should be less than 200 KB but the size was ' + size + " KB" + '</b>');
                    $("#ProfileImageFile").empty();
                } else {
                    $("#imageUploadResult").html('<b>' +
                        'This file size is: ' + size + " KB" + '</b>');
                }
            } else {
                $("#ProfileImageFile").val("");
                $("#imageUploadResult").html('<b style="color:red">' +
                    'The file should be image ' + '</b>');
            }

        });

            $('#firstName').change(function () {
                $('#firstNameErrorMsg').empty();
            });

            $('#lastName').change(function () {
                $('#lastNameErrorMsg').empty()
            });

            $('#emailAddressInput').change(function () {
                $('#emailAddressErrorMsg').empty();
            });

            $('#mobileNumberInput').change(function () {
                $('#mobileNumberErrorMsg').empty()
            });

            $('#panNumberInput').change(function () {
                $('#panNumberErrorMsg').empty();
            });

            $('#passportNumberInput').change(function () {
                $('#passportNumberErrorMsg').empty()
            });






            /*Mobile Number validation for uniqueness*/
        $('#mobileNumberInput').change(function () {
            var mobileNumber = $(this).val();
            if (mobileNumber) {
                $.ajax({
                    url: "@Url.Action("IsMobileNumberUnique", "Home")",
                    type: "POST",
                    data: { mobileNumber: mobileNumber },
                    success: function (data) {
                        if (data) {
                           $('#mobileNumberError').html('<b style="color:red">' +
                                'Mobile Number already exist ' + '</b>');
                        } else
                        {
                            $('#mobileNumberError').empty();
                        }
                    }
                });
            }
        });

            /*Email Address validation for uniqueness*/
            $('#emailAddressInput').change(function () {
                var emailAddress = $(this).val();
                if (emailAddress) {
                    $.ajax({
                        url: "@Url.Action("IsEmailAddressUnique", "Home")",
                        type: "POST",
                        data: { emailAddress: emailAddress },
                        success: function (data) {
                            if (data) {
                                $('#emailAddressError').html('<b style="color:red">' +
                                    'Email Address already exist ' + '</b>');
                            } else {
                                $('#emailAddressError').empty();
                            }
                        }
                    });
                }
            });

            /*Pan Number validation for uniqueness*/
            $('#panNumberInput').change(function () {
                var panNumber = $(this).val();
                if (panNumber) {
                    $.ajax({
                        url: "@Url.Action("IsPanNumberUnique", "Home")",
                        type: "POST",
                        data: { panNumber: panNumber },
                        success: function (data) {
                            if (data) {
                                $('#panNumberError').html('<b style="color:red">' + 'Pan Number already exist ' + '</b>');
                            } else {
                                $('#panNumberError').empty();
                            }
                        }
                    });
                }
            });

            /*Passport Number validation for uniqueness*/
            $('#passportNumberInput').change(function () {
                var passportNumber = $(this).val();
                if (passportNumber) {
                    $.ajax({
                        url: "@Url.Action("IsPassportNumberUnique", "Home")",
                        type: "POST",
                        data: { passportNumber: passportNumber },
                        success: function (data) {
                            if (data) {
                                $('#passportNumberError').html('<b style="color:red">' +
                                    'Passport Number already exist ' + '</b>');
                            } else {
                                $('#passportNumberError').empty();
                            }
                        }
                    });
                }
            });



        //Initializing date with datepicker and validation of date selected
        $(function () {
            // Initialize DateOfBirth date picker
            $("#DateOfBirth").datepicker({
                format: "yyyy-mm-dd",
                autoclose: true,
                todayHighlight: true,
                // Add other options for customization, if needed
            });

            //date of birth validation
            $('#DateOfBirth').on('change', function () {
                var selectedDate = $(this).val();
                var todaysDate = new Date().toISOString().slice(0, 10);
                $('#SelectedDOBResult').empty();
                console.log(selectedDate);
                console.log(todaysDate);
                if (selectedDate >= todaysDate)
                {
                    $('#DateOfBirth').val("");
                    $('#SelectedDOBResult').html('<b style="color:red">' +
                        'The date should not be greater than today\'s date ' + '</b>');
                }
            });

            $(document).ready(function () {
                // Add click event listener to the date picker icon
                $("#dateOfBirthPickerIcon").on("click", function () {
                    $("#DateOfBirth").focus();
                });
            });

            $(document).ready(function () {
                // Add click event listener to the date picker icon
                $("#dateOfJoineePickerIcon").on("click", function () {
                    $("#DateOfJoinee").focus();
                });
            });

            // Initialize DateOfJoinee date picker
            $("#DateOfJoinee").datepicker({
                format: "yyyy-mm-dd",
                autoclose: true,
                todayHighlight: true,
                // Add other options for customization, if needed
            });

            //validation of date of joinee field
            $('#DateOfJoinee').on('change', function () {
                var selectedDate = $(this).val();
                var todaysDate = new Date().toISOString().slice(0, 10);
                $('#SelectedDOJResult').empty();
                console.log(selectedDate);
                console.log(todaysDate);
                if (selectedDate >= todaysDate) {
                    $('#DateOfJoinee').val("");
                    $('#SelectedDOJResult').html('<b style="color:red">' +
                        'The date should not be greater than today\'s date ' + '</b>');
                }
            });
        });


            //Handling Delete functionality with SweetAlert Confirmation box.
            //$(document).ready(function () {
                // Handle Update button click to show the SweetAlert confirmation
                $("#create-btn").click(function (e) {
                     e.preventDefault();
                    var formData = $("#createEmployeeForm").serialize();
                    console.log(formData)
                    //if ($('#ddlCountry').val().empty) {
                    //    Swal.fire({
                    //        icon: 'success',
                    //        title: 'Successfully Added employee',
                    //        showConfirmButton: false,
                    //        timer: 2200
                    //    })
                    //}

                    $.ajax({
                        url: "@Url.Action("CreateEmployeeValidationCheck", "Home")",
                        type: "POST",
                        data: formData,
                        dataType: "JSON",
                        success: function (data) {
                            if (data.result == 'Invalid') {
                                $("#createEmployeeForm").submit();
                            } else {
                                $.ajax({
                                    url: "@Url.Action("CreateEmployee", "Home")",
                                    type: "POST",
                                    data: formData,
                                    dataType: "JSON",
                                    success: function (data) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Successfully added Employee',
                                            showConfirmButton: false,
                                            timer: 2200
                                        }).then(() => {
                                            window.location = data.url;
                                        })
                                    }
                                });
                            }
                        }
                    });
                });
            //});
        </script>
    }
